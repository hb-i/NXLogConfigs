# nxlog.conf - Send IIS SMTP server logs to Graylog. All fields are enabled in SMTP server's W3C log settings.

Panic Soft
#NoFreeOnExit TRUE

define ROOT     C:\Program Files\nxlog
define CERTDIR  %ROOT%\cert
define CONFDIR  %ROOT%\conf\nxlog.d
define LOGDIR   %ROOT%\data

include %CONFDIR%\\*.conf
define LOGFILE  %LOGDIR%\nxlog.log
LogFile %LOGFILE%

Moduledir %ROOT%\modules
CacheDir  %ROOT%\data
Pidfile   %ROOT%\data\nxlog.pid
SpoolDir  %ROOT%\data

<Extension _syslog>
    Module      xm_syslog
</Extension>

<Extension _charconv>
    Module      xm_charconv
    AutodetectCharsets iso8859-2, utf-8, utf-16, utf-32
</Extension>

<Extension _exec>
    Module      xm_exec
</Extension>

<Extension _fileop>
    Module      xm_fileop

    # Check the size of our log file hourly, rotate if larger than 5MB
    <Schedule>
        Every   1 hour
        Exec    if (file_exists('%LOGFILE%') and \
                   (file_size('%LOGFILE%') >= 5M)) \
                    file_cycle('%LOGFILE%', 8);
    </Schedule>

    # Rotate our log file every week on Sunday at midnight
    <Schedule>
        When    @weekly
        Exec    if file_exists('%LOGFILE%') file_cycle('%LOGFILE%', 8);
    </Schedule>
</Extension>


# CUSTOM CONFIGS FOR EXTRACTING LOGS FROM GIVEN FILE(S)

<Extension json>
    Module    xm_json
</Extension>

<Input events>
    # Use im_file module to read log file
    Module    im_file

    # Log file path
    File      'C:\Windows\System32\LogFiles\SmtpSvc1\ex*.log'

    <Exec>

	# Regular expression to extract and tag the fields
        if $raw_event =~ /^(?!.*\n$)(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+) (\S+)/
        {
            # Present variables to Graylog
            $time = $1;
            $ClientIP = $2;
            $ClientUsername = $3;
            $ServerSitename = $4;
            $Server = $5;
            $ServerIP = $6;
            $ServerPort = $7;
            $ClientMethod =$8;
            $URIstem = $9;
            $URIquery = $10;
            $ServerStatus = $11;
            $ServerWin32Status = $12;
            $ServerBytes = $13;
            $ClientBytes = $14;
            $TimeTaken = $15;
            $ClientVersion = $16;
        }

        else
        {
            drop();
        }
        to_json();
    </Exec>
</Input>

<Extension _gelf>
    Module      xm_gelf
</Extension>

# Graylog server IP and log port
<Output graylog>
    Module      om_udp
    Host        MyGraylogServer.example.com
    Port        12201
    OutputType        GELF
</Output>

# Create a route for the input and output
<Route 1>
    Path        events => graylog
</Route>
